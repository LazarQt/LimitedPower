@page "/deckwizard/{setcode}"
@inherits PageBase

@using System.IO
@using System.Security.Cryptography.X509Certificates
@using LimitedPower.UI.Services
@using LimitedPower.UI.ViewModel
@using Newtonsoft.Json

<h3>Upload Files</h3>

<input @bind="@_rawInput" />
<button @onclick="BuildDeck">Generate deck</button>
<span style="cursor: pointer" @onclick="() => SwitchLb()">Lessons only in sideboard?: @LessonSideboardOnly</span>
<span style="cursor: pointer" @onclick="() => SwitchTri()">Tricolor?: @IncludeTri</span>
<p></p>

@*@foreach (var deck in possibleDecks)
    {
        <span>c: @deck.Key</span>
        foreach (var card in deck.Value)
        {

            <img src="@card.ImageUrl" class="img-fluid" />
        }

    }*@



<div class="row">
    @foreach (var deck in possibleDecks)
    {
        <div class="col-sm-12 text-center"><p><b>@deck.ColorCombination Power: @deck.TotalPower</b></p></div>

        var rows = Rows(deck.Cards);

        @for (var index = 0; index < rows.Count; index++)
        {
            var row = rows[index];
            <div class="col-2 text-center">
                @for (var j = 0; j < row.Count; j++)
                {
                    var card = row[j];

                    <img src="@card.ImageUrl" class="img-fluid" style="position: relative; top: -@(j*240)px" />

                }
            </div>
        }



    }
</div>



@code {

    public void SwitchLb()
    {
        LessonSideboardOnly = !LessonSideboardOnly;
        BuildDeck();
    }

    public void SwitchTri()
    {
        IncludeTri = !IncludeTri;
        BuildDeck();
    }

    public bool LessonSideboardOnly = true;
    public bool IncludeTri = false;

    public class Deck
    {
        public List<Card> Cards { get; set; }
        public string ColorCombination { get; set; }
        public double TotalPower => Cards.Average(a => a.TotalRating(true));
    }

    public List<List<Card>> Rows(List<Card> deck)
    {
        var result = new List<List<Card>>();
        result.Add(deck.Where(d => d.ManaValue <= 1).ToList());
        result.Add(deck.Where(d => d.ManaValue == 2).ToList());
        result.Add(deck.Where(d => d.ManaValue == 3).ToList());
        result.Add(deck.Where(d => d.ManaValue == 4).ToList());
        result.Add(deck.Where(d => d.ManaValue == 5).ToList());
        result.Add(deck.Where(d => d.ManaValue >= 6).ToList());
        return result;
    }

    [Inject]
    ICardService CardService { get; set; }

    List<Deck> possibleDecks = new();

    readonly List<Card> _cardPool = new List<Card>();
    private string _rawInput = "{\"id\":504,\"payload\":{\"Id\":\"9fffb079-44c9-43fd-b689-95dddb3b5e4c\",\"InternalEventName\":\"Sealed_STX_20210415\",\"PlayerId\":null,\"EventType\":0,\"EventSubType\":0,\"ModuleInstanceData\":{\"HasPaidEntry\":\"Gem\",\"SealedPoolGenerated\":true,\"HasGranted\":true},\"CurrentEventState\":\"PreMatch\",\"CurrentModule\":\"DeckSelect\",\"CardPool\":[76634,76649,76404,76592,76647,76590,76429,76657,76470,76450,76632,76438,76484,76520,77503,76663,76468,76651,76412,76627,76401,76411,76466,76443,76395,76596,76418,76669,76451,77524,76660,76517,76681,76404,76442,76470,76496,76530,76405,76396,76658,76615,76655,76600,77533,76486,76454,76404,76538,76574,76659,76647,76645,76517,76393,76635,76628,76439,76420,77523,76676,76649,76517,76593,76631,76466,76679,76590,76429,76619,76658,76447,76481,76540,77482,76461,76468,76681,76616,76509,76514,76427,76623,76534,76644,76532,76507,76522,76656,77502],\"CourseDeck\":null,\"PreviousOpponents\":[]}}";
    List<Card> _cards = new List<Card>();

    public void BuildDeck()
    {
        possibleDecks.Clear();
        _cardPool.Clear();
        if (string.IsNullOrEmpty(_rawInput)) return;
        while (_rawInput[0] != '{')
        {
            _rawInput = _rawInput.Remove(0, 1);
        }
        var cardIds = JsonConvert.DeserializeObject<LogFile>(_rawInput)?.Payload.CardPool;
        if (cardIds == null) return;
        cardIds.Sort();
        foreach (var c in cardIds)
        {
            _cardPool.Add(_cards.First(o => o.ArenaId == c));
        }


        var combinations = new[]
{
            "w", "u", "b", "r", "g",
            "wu", "wb", "wr", "wg", "ub", "ur", "ug", "br", "bg", "rg",
            "gwu", "wub", "ubr", "brg", "rgw", "wbg", "urw", "bgu", "rwb", "gur",

        };
        if (!IncludeTri) combinations = combinations.Where(c => c.Length <= 2).ToArray();
        foreach (var combination in combinations)
        {
            var castableCards = _cardPool.Where(c => c.Castable(combination));
            castableCards = castableCards.OrderByDescending(c => c.TotalRating(true)); // order by best
            if (LessonSideboardOnly)
            {
                castableCards = castableCards.Where(c => !c.CardFaces.Any(f => f.TypeLine.Contains("Lesson"))); // remove lessons
            }
            castableCards = castableCards.Take(23); // only take 23
            if (castableCards.Count() < 23) continue;
            possibleDecks.Add(new Deck()
            {
                Cards = castableCards.ToList(),
                ColorCombination = combination
            });

        }
        possibleDecks = possibleDecks.OrderByDescending(o => o.TotalPower).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _cards = await CardService.GetCards(SetCode);
    }


    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class WinLossGate
    {
        [JsonProperty("MaxWins")]
        public int MaxWins { get; set; }

        [JsonProperty("MaxLosses")]
        public int MaxLosses { get; set; }

        [JsonProperty("MaxGames")]
        public int MaxGames { get; set; }

        [JsonProperty("CurrentWins")]
        public int CurrentWins { get; set; }

        [JsonProperty("CurrentLosses")]
        public int CurrentLosses { get; set; }

        [JsonProperty("CurrentGames")]
        public int CurrentGames { get; set; }

        [JsonProperty("ProcessedMatchIds")]
        public List<string> ProcessedMatchIds { get; set; }
    }

    public class ModuleInstanceData
    {
        [JsonProperty("HasPaidEntry")]
        public string HasPaidEntry { get; set; }

        [JsonProperty("SealedPoolGenerated")]
        public bool SealedPoolGenerated { get; set; }

        [JsonProperty("HasGranted")]
        public bool HasGranted { get; set; }

        [JsonProperty("DeckSelected")]
        public bool DeckSelected { get; set; }

        [JsonProperty("WinLossGate")]
        public WinLossGate WinLossGate { get; set; }
    }

    public class Attributes
    {
    }

    public class CourseDeck
    {
        [JsonProperty("commandZoneGRPIds")]
        public List<object> CommandZoneGRPIds { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }

        [JsonProperty("companionGRPId")]
        public int CompanionGRPId { get; set; }

        [JsonProperty("mainDeck")]
        public List<int> MainDeck { get; set; }

        [JsonProperty("sideboard")]
        public List<int> Sideboard { get; set; }

        [JsonProperty("reducedSideboard")]
        public List<object> ReducedSideboard { get; set; }

        [JsonProperty("isValid")]
        public bool IsValid { get; set; }

        [JsonProperty("isCompanionValid")]
        public bool IsCompanionValid { get; set; }

        [JsonProperty("lockedForUse")]
        public bool LockedForUse { get; set; }

        [JsonProperty("lockedForEdit")]
        public bool LockedForEdit { get; set; }

        [JsonProperty("resourceId")]
        public string ResourceId { get; set; }

        [JsonProperty("cardSkins")]
        public List<object> CardSkins { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("format")]
        public string Format { get; set; }

        [JsonProperty("deckTileId")]
        public int DeckTileId { get; set; }

        [JsonProperty("cardBack")]
        public string CardBack { get; set; }

        [JsonProperty("lastUpdated")]
        public DateTime LastUpdated { get; set; }
    }

    public class Payload
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("InternalEventName")]
        public string InternalEventName { get; set; }

        [JsonProperty("PlayerId")]
        public object PlayerId { get; set; }

        [JsonProperty("EventType")]
        public int EventType { get; set; }

        [JsonProperty("EventSubType")]
        public int EventSubType { get; set; }

        [JsonProperty("ModuleInstanceData")]
        public ModuleInstanceData ModuleInstanceData { get; set; }

        [JsonProperty("CurrentEventState")]
        public string CurrentEventState { get; set; }

        [JsonProperty("CurrentModule")]
        public string CurrentModule { get; set; }

        [JsonProperty("CardPool")]
        public List<int> CardPool { get; set; }

        [JsonProperty("CourseDeck")]
        public CourseDeck CourseDeck { get; set; }

        [JsonProperty("PreviousOpponents")]
        public List<object> PreviousOpponents { get; set; }
    }

    public class LogFile
    {
        [JsonProperty("id")]
        public int Id { get; set; }

        [JsonProperty("payload")]
        public Payload Payload { get; set; }
    }


}